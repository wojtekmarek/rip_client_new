{"ast":null,"code":"'use strict';\n\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _indexOfInstanceProperty from \"core-js-pure/stable/instance/index-of.js\";\nimport _mapInstanceProperty from \"core-js-pure/stable/instance/map.js\";\nimport _reduceInstanceProperty from \"core-js-pure/stable/instance/reduce.js\";\nimport _parseFloat from \"core-js-pure/stable/parse-float.js\";\nimport _sliceInstanceProperty from \"core-js-pure/stable/instance/slice.js\";\nimport _filterInstanceProperty from \"core-js-pure/stable/instance/filter.js\";\nimport retina from 'is-retina';\nvar IS_RETINA = retina();\nexport function fetch(url, successCb, errorCb) {\n  var request = new XMLHttpRequest();\n  request.onreadystatechange = function () {\n    if (request.readyState === 4) {\n      if (request.status === 200) {\n        var data = JSON.parse(request.responseText);\n        successCb(data);\n      } else {\n        errorCb(request.status);\n      }\n    }\n  };\n  request.open('GET', url, true);\n  request.send();\n}\nexport function fetchJSONP(url, successCb, errorCb) {\n  var callbackName = 'jsonp_cb_' + Math.round(100000 * Math.random());\n  var script = document.createElement('script');\n  script.src = url + (_indexOfInstanceProperty(url).call(url, '?') >= 0 ? '&' : '?') + 'callback=' + callbackName;\n  document.body.appendChild(script);\n  script.onerror = function () {\n    errorCb();\n  };\n  window[callbackName] = function (data) {\n    delete window[callbackName];\n    document.body.removeChild(script);\n    successCb(data);\n  };\n} // https://webaim.org/resources/contrastchecker/\n\nexport var defaultColors = ['#A62A21', '#7e3794', '#0B51C1', '#3A6024', '#A81563', '#B3003C']; // https://regex101.com/r/YEsPER/1\n// https://developer.mozilla.org/en-US/docs/Web/CSS/length\n\nvar reSize = /^([-+]?(?:\\d+(?:\\.\\d+)?|\\.\\d+))([a-z]{2,4}|%)?$/; // https://en.wikipedia.org/wiki/Linear_congruential_generator\n\nfunction _stringAsciiPRNG(value, m) {\n  var _context;\n\n  // Xn+1 = (a * Xn + c) % m\n  // 0 < a < m\n  // 0 <= c < m\n  // 0 <= X0 < m\n  var charCodes = _mapInstanceProperty(_context = _toConsumableArray(value)).call(_context, function (letter) {\n    return letter.charCodeAt(0);\n  });\n  var len = charCodes.length;\n  var a = len % (m - 1) + 1;\n  var c = _reduceInstanceProperty(charCodes).call(charCodes, function (current, next) {\n    return current + next;\n  }) % m;\n  var random = charCodes[0] % m;\n  for (var i = 0; i < len; i++) {\n    random = (a * random + c) % m;\n  }\n  return random;\n}\nexport function getRandomColor(value) {\n  var colors = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultColors;\n  // if no value is passed, always return transparent color otherwise\n  // a rerender would show a new color which would will\n  // give strange effects when an interface is loading\n  // and gets rerendered a few consequent times\n  if (!value) return 'transparent'; // value based random color index\n  // the reason we don't just use a random number is to make sure that\n  // a certain value will always get the same color assigned given\n  // a fixed set of colors\n\n  var colorIndex = _stringAsciiPRNG(value, colors.length);\n  return colors[colorIndex];\n}\nexport function parseSize(size) {\n  size = '' + size;\n  var _ref = reSize.exec(size) || [],\n    _ref2 = _slicedToArray(_ref, 3),\n    _ref2$ = _ref2[1],\n    value = _ref2$ === void 0 ? 0 : _ref2$,\n    _ref2$2 = _ref2[2],\n    unit = _ref2$2 === void 0 ? 'px' : _ref2$2;\n  return {\n    value: _parseFloat(value),\n    str: value + unit,\n    unit: unit\n  };\n}\n/**\n * Calculate absolute size in pixels we want for the images\n * that get requested from the various sources. They don't\n * understand relative sizes like `em` or `vww`.  We select\n * a fixed size of 512px when we can't detect the true pixel size.\n */\n\nexport function getImageSize(size) {\n  size = parseSize(size);\n  if (isNaN(size.value))\n    // invalid size, use fallback\n    size = 512;else if (size.unit === 'px')\n    // px are good, use them\n    size = size.value;else if (size.value === 0)\n    // relative 0 === absolute 0\n    size = 0;else\n    // anything else is unknown, use fallback\n    size = 512;\n  if (IS_RETINA) size = size * 2;\n  return size;\n}\nexport function defaultInitials(name, _ref3) {\n  var _context2, _context3, _context4;\n  var maxInitials = _ref3.maxInitials;\n  return _sliceInstanceProperty(_context2 = _filterInstanceProperty(_context3 = _mapInstanceProperty(_context4 = name.split(/\\s/)).call(_context4, function (part) {\n    return part.substring(0, 1).toUpperCase();\n  })).call(_context3, function (v) {\n    return !!v;\n  })).call(_context2, 0, maxInitials).join('').toUpperCase();\n}\n/**\n * Grouped timeouts reduce the amount of timeouts trigged\n * by grouping multiple handlers into a single setTimeout call.\n *\n * This reduces accuracy of the timeout but will be less expensive\n * when multiple avatar have been loaded into view.\n */\n\nvar timeoutGroups = {};\nexport function setGroupedTimeout(fn, ttl) {\n  if (timeoutGroups[ttl]) {\n    timeoutGroups[ttl].push(fn);\n    return;\n  }\n  var callbacks = timeoutGroups[ttl] = [fn];\n  setTimeout(function () {\n    delete timeoutGroups[ttl];\n    callbacks.forEach(function (cb) {\n      return cb();\n    });\n  }, ttl);\n}\nexport function getNullableText() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n  for (var _i = 0, _args = args; _i < _args.length; _i++) {\n    var arg = _args[_i];\n    if (arg) return arg;\n    if (arg === false || arg === null) return null;\n  }\n  return;\n}\nexport function calculateBorderRadius(round) {\n  if (round === true) return '100%';\n  if (round === false) return;\n  return round;\n}","map":null,"metadata":{},"sourceType":"module"}